#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

const int SQRT_OF_GRID = 20;
layout (local_size_x = SQRT_OF_GRID, local_size_y = SQRT_OF_GRID, local_size_z = 1) in;
layout (binding = 0) uniform ParameterUBO {
    int passedHours; //TODO 'long long' : int64_t passedHours;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

uint index = gl_GlobalInvocationID.x;
int loopHours = ubo.passedHours % (SQRT_OF_GRID * SQRT_OF_GRID);

vec4 red = vec4(1.0, 0.0, 0.0, 1.0);
vec4 green = vec4(0.0, 1.0, 0.0, 1.0); 
vec4 blue = vec4(0.0, 0.0, 1.0, 1.0);
vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
vec4 black = vec4(0.0, 0.0, 0.0, 1.0);
vec4 on = vec4(0.15);
vec4 off = vec4(-1.0);
vec4 now = vec4(loopHours);

struct Cell {
    vec4 position;  // float    xy(z)
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    vec4 endOfTurn; // bool     pqrwt
} cells;
layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };

int neighbourCellsInRange(int range){
        int neighbourCellsInRange = 0;
        int gridSize = SQRT_OF_GRID;
        int indexX = int(index) % SQRT_OF_GRID;
        int indexY = int(index) / SQRT_OF_GRID;
        int startX = max(indexX - range, 0);
        int endX = min(indexX + range, SQRT_OF_GRID - 1);
        int startY = max(indexY - range, 0);
        int endY = min(indexY + range, SQRT_OF_GRID - 1);
        for (int x = startX; x <= endX; x++) {
            for (int y = startY; y <= endY; y++) {
                int neighbourIndex = y * SQRT_OF_GRID + x;
                if (cellIn[neighbourIndex].color == blue && neighbourIndex != index
                    || cellIn[neighbourIndex].color == green && neighbourIndex != index) {
                    neighbourCellsInRange++;
                }
            }
        }
    return neighbourCellsInRange; 
}

void simulate(out Cell cell){
    vec4 pos = cellIn[index].position.xyzw;
    int neighbours = neighbourCellsInRange(1);

    if (neighbours == 3 || (cellOut[index].color == green && neighbours == 2)) {
        cell = Cell(pos, green, on, now);
    } else if (neighbours < 2) {
        cell = Cell(pos, black, off, now);
    } else {
        cell = Cell(pos, black, off, now);
    };
}

void main() {  

    if (cellIn[index].endOfTurn == vec4(loopHours)) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } else { 
        
        simulate(cells);

        cellOut[index].position     = cells.position;
        cellOut[index].color        = cells.color;
        cellOut[index].size         = cells.size;
        cellOut[index].endOfTurn    = cells.endOfTurn;
    }; 
}













// void simulate(out Cell cell){
//     vec4 pos = cellIn[index].position.xyzw;
//     int neighbours = neighbourCellsInRange(1);

//     if (neighbours < 2 || neighbours > 3) {
//         cell = Cell(pos, black, off, now);
//     } else if (neighbours == 3 || (cellOut[index].color == green && neighbours == 2)) {
//         cell = Cell(pos, green, on, now);
//     } else {
//         cell = Cell(pos, black, off, now);
//     };
// }

// void main() {  
//     if (cellIn[index].endOfTurn == vec4(loopHours)) { 
//         cellOut[index] = cellIn[index]; 
//         return; 
//     } else { 

//         simulate(cells);

//         cellOut[index].position     = cells.position;
//         cellOut[index].color        = cells.color;
//         cellOut[index].size         = cells.size;
//         cellOut[index].endOfTurn    = cells.endOfTurn;
//     }; 
// }