#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

struct Cell {
    vec4 position;  // float    xyz
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    ivec4 states;   // bool     alive, stage, cycle, passedHours
    vec4 tileSidesHeight;
    vec4 tileCornersHeight;
} cell;

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(push_constant, std430) uniform pushConstant { uint64_t passedHours; };
layout (binding = 0) uniform ParameterUBO {
    vec4 lightDirection;
    ivec2 gridDimensions;
    float gridHeight;
    float cellSize;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;
ivec2 gridDimensions = ubo.gridDimensions;

uint globalID_x = gl_GlobalInvocationID.x;
uint globalID_y = gl_GlobalInvocationID.y;
uint index = globalID_y * gridDimensions.x + globalID_x % gridDimensions.x + (globalID_x / gridDimensions.x) * gridDimensions.y;

const int alive       =  1;
const int dead        = -1;
const int off         = -1;
const vec4 sizeOff    = vec4(0.0);
const vec4 red        = vec4(1.0, 0.0, 0.0, 1.0);
const vec4 green      = vec4(0.0, 1.0, 0.0, 1.0); 
const vec4 dimGreen   = vec4(0.0, 0.05, 0.0, 1.0);
const vec4 blue       = vec4(0.0, 0.0, 1.0, 1.0);
const vec4 white      = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 grey1      = vec4(0.5, 0.5, 0.5, 1.0);
const vec4 black      = vec4(0.0, 0.0, 0.0, 1.0);
const vec4 dimBlue    = vec4(0.0, 0.0, 0.1, 1.0);
const vec4 terrain    = vec4(0.0, 0.1, 0.1, 1.0);

vec4 size       = vec4(ubo.cellSize);
vec4 pos        = cellIn[index].position;
vec4 colorIn    = cellIn[index].color;
ivec4 statesIn  = cellIn[index].states;

const int cycleSize = 24;
ivec4 setState(int _alive, int stage){ 
    int cycle = int(passedHours % cycleSize + 1); 
    return ivec4(_alive, stage, cycle, passedHours); 
}

int getNeighbourIndex(ivec2 offset) {
    int indexX = int(index) % gridDimensions.x;
    int indexY = int(index) / gridDimensions.x;
    int neighbourX = (indexX + offset.x + gridDimensions.x) % gridDimensions.x;
    int neighbourY = (indexY + offset.y + gridDimensions.y) % gridDimensions.y;
    int neighbourIndex = neighbourY * gridDimensions.x + neighbourX;
    return neighbourIndex;
}

int neighbourAlive(int index) {
    bvec2 aliveState = equal(cellIn[index].states.xy, ivec2(alive, 1));
    return int(all(aliveState));
}

float matchHeight(int target, float multiplyBy ){
    float height = cellIn[target].position.z;
    float myHeight = cellIn[index].position.z;
    int toVertexScale = 10;  int offsetFromCenter = -1; 
    float matchedHeight = ((height - myHeight) * toVertexScale + offsetFromCenter) * multiplyBy;
    return matchedHeight;
}

vec4 sidesHeight;
vec4 cornersHeight;
void setTileEdgeHeight(){

        cornersHeight.x = matchHeight( getNeighbourIndex( ivec2(0, 0) ), 1.0f );
        cornersHeight.y = matchHeight( getNeighbourIndex( ivec2(0, 1) ), 1.0f ); 
        cornersHeight.z = matchHeight( getNeighbourIndex( ivec2(-1, 1) ), 1.0f ); 
        cornersHeight.w = matchHeight( getNeighbourIndex( ivec2(-1, 0) ), 1.0f );
        sidesHeight.x = matchHeight( getNeighbourIndex( ivec2(1, 0) ), 0.5f );    
        sidesHeight.y = matchHeight( getNeighbourIndex( ivec2(0, 1) ), 0.5f );
        sidesHeight.z = matchHeight( getNeighbourIndex( ivec2(-1, 0) ), 0.5f ); 
        sidesHeight.w = matchHeight( getNeighbourIndex( ivec2(0, -1) ), 0.5f );

}

int cycleNeighbours(int range) {
    int neighboursAlive = 0;

    const int numOffsets = 8;
    ivec2 directNeighbourOffsets[numOffsets] = {
        ivec2(-1, -1), ivec2(-1, 0), ivec2(-1, 1), ivec2(0, -1),
        ivec2(0, 1), ivec2(1, -1), ivec2(1, 0), ivec2(1, 1)
    };

    for (int i = 0; i < numOffsets; i++) {
        ivec2 coordOffset = directNeighbourOffsets[i];
        int neighbourIndex = getNeighbourIndex(coordOffset);
        neighboursAlive += neighbourAlive(neighbourIndex);
    }
    return neighboursAlive;
}

bool aliveCell          = statesIn.x == alive;
bool deadCell           = statesIn.x == dead;
bool stage(int number)  { return statesIn.y == number; }
bool inCycleRange       = statesIn.z >= 0 && statesIn.z < cycleSize;
bool reachedCycleEnd    = statesIn.z == cycleSize;

bool initialized        = aliveCell && colorIn == blue;
bool lifeCycle          = aliveCell && inCycleRange;
bool endOfStage         = aliveCell && reachedCycleEnd;
bool live(int neighbours) { return (aliveCell && (neighbours == 3 || neighbours == 2)) || (deadCell && neighbours == 3); }
bool die(int neighbours)  { return (aliveCell && (neighbours < 2 || neighbours > 3));}
vec4 colorIncrement     = colorIn + vec4(float((passedHours % cycleSize + 1)) / float(cycleSize * 50), vec3(0.0));

void simulate(out Cell cell){
    int neighbours  = cycleNeighbours(1);

    if (stage(0)) {
        cell = initialized ?    Cell(pos, white, size, setState(alive, 0), sidesHeight, cornersHeight) :
               lifeCycle ?      Cell(pos, colorIncrement, size, setState(alive, 0),sidesHeight, cornersHeight) :
               endOfStage ?     Cell(pos, white, size, setState(alive, 1),sidesHeight, cornersHeight) :
                                Cell(pos, grey1, sizeOff, setState(dead, 1),sidesHeight, cornersHeight);
    } else if (stage(1)) {
        cell = live(neighbours) ?   Cell(pos, white, size, setState(alive, 0),sidesHeight, cornersHeight) :
               die(neighbours) ?    Cell(pos, grey1, sizeOff, setState(dead, 0),sidesHeight, cornersHeight) :
                                    Cell(pos, colorIn, sizeOff, setState(dead, 1),sidesHeight, cornersHeight);
    }
}

void main() {  
    if (cellIn[index].states.w == passedHours) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } 
    setTileEdgeHeight();

    simulate(cell);
    cellOut[index] = cell;
}




/*float findCenter(float a, float b){ return (a + b) * 0.5; }

float randomFloat(int value) {
    float random = fract(sin(float(value)) * 43758.5453); // Hash function
    return random;
}*/