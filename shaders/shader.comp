#version 450
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant, std430) uniform pc { int pushedPassedHours; };

layout (binding = 0) uniform ParameterUBO {
    vec4 lightDirection;
    ivec2 gridDimensions;
    float gridHeight;
    float cellSize;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

uint globalID_x = gl_GlobalInvocationID.x;
uint globalID_y = gl_GlobalInvocationID.y;
uint index = globalID_y * ubo.gridDimensions.x + globalID_x % ubo.gridDimensions.x + (globalID_x / ubo.gridDimensions.x) * ubo.gridDimensions.y;

struct Cell {
    vec4 position;  // float    xyz
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    ivec4 states;   // bool     alive, stage, cycle, passedHours
} cell;

int cycleSize = 24;
ivec4 setState(int _alive, int stage){ int cycle = passedHours % cycleSize + 1; return ivec4(_alive, stage, cycle, passedHours); }

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };

int alive       =  1;
int dead        =  -1;
vec4 size       = vec4(ubo.cellSize);
vec4 red        = vec4(1.0, 0.0, 0.0, 1.0);
vec4 green      = vec4(0.0, 1.0, 0.0, 1.0); 
vec4 dimGreen   = vec4(0.0, 0.05, 0.0, 1.0);
vec4 blue       = vec4(0.0, 0.0, 1.0, 1.0);
vec4 white      = vec4(1.0, 1.0, 1.0, 1.0);
vec4 black      = vec4(0.0, 0.0, 0.0, 1.0);
vec4 dimBlue    = vec4(0.0, 0.0, 0.1, 1.0);
vec4 terrain    = vec4(0.0, 0.1, 0.1, 1.0);

ivec4 neighbourCellsInRange(int range){
    ivec4 neighbourCellsInRange = ivec4(0);
    int gridSize = ubo.gridDimensions.x * ubo.gridDimensions.y;
    int indexX = int(index) % ubo.gridDimensions.x;
    int indexY = int(index) / ubo.gridDimensions.x;
    int startX = max(indexX - range, 0);
    int endX = min(indexX + range, ubo.gridDimensions.x - 1);
    int startY = max(indexY - range, 0);
    int endY = min(indexY + range, ubo.gridDimensions.y - 1);

    for (int x = startX; x <= endX; x++) {
        for (int y = startY; y <= endY; y++) {
            int neighbourIndex = y * ubo.gridDimensions.x + x;
            bool notSelf = neighbourIndex != index;
            bool neighbourAlive = (cellIn[neighbourIndex].states.x == alive) && (cellIn[neighbourIndex].states.y == 1);
            neighbourCellsInRange += int(neighbourAlive && notSelf);
        }
    }
    return neighbourCellsInRange; 
}

vec4 pos        = cellIn[index].position;
vec4 colorIn    = cellIn[index].color;
ivec4 statesIn  = cellIn[index].states;

bool aliveCell          = statesIn.x == alive;
bool deadCell           = statesIn.x == dead;
bool stage(int number)  { return statesIn.y == number; }
bool inCycleRange       = statesIn.z >= 0 && statesIn.z < cycleSize;
bool reachedCycleEnd    = statesIn.z == cycleSize;

bool initialized        = aliveCell && colorIn == blue;
bool lifeCycle          = aliveCell && inCycleRange;
bool endOfStage         = aliveCell && reachedCycleEnd;
bool live(int neighbours) { return (aliveCell && (neighbours == 3 || neighbours == 2)) || (deadCell && neighbours == 3); }
bool die(int neighbours)  { return (aliveCell && (neighbours < 2 || neighbours > 3));}
vec4 colorIncrement     = colorIn + vec4(float((passedHours % cycleSize + 1)) / float(cycleSize * 50), vec3(0.0));

void simulate(out Cell cell){
    int neighbours  = neighbourCellsInRange(1).x;

    if (stage(0)) {
        cell = initialized ?    Cell(pos, green, size, setState(alive, 0)) :
               lifeCycle ?      Cell(pos, colorIncrement, size, setState(alive, 0)) :
               endOfStage ?     Cell(pos, green, size, setState(alive, 1)) :
                                Cell(pos, terrain, size, setState(dead, 1));
    } else if (stage(1)) {
        cell = live(neighbours) ?   Cell(pos, green, size, setState(alive, 0)) :
               die(neighbours) ?    Cell(pos, terrain, size, setState(dead, 0)) :
                                    Cell(pos, colorIn, size, setState(dead, 1));
    }
}

void main() {  
    if (cellIn[index].states.w == passedHours) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } else { 
        simulate(cell);
        cellOut[index] = cell;
    }; 
}