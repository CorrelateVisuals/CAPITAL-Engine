#version 450
                                                //#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
const float tolerance  = 0.0001f; 
const int SQRT_OF_GRID = 30;
layout (local_size_x = SQRT_OF_GRID, local_size_y = SQRT_OF_GRID, local_size_z = 1) in;

layout (binding = 0) uniform ParameterUBO {
    int time;                                   //TODO 'long long' : int64_t passedHours;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

struct Cell {
    vec4 position;  // float    xyz
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    ivec4 states;   // bool     alive, stage, notInUse, ubo.time
} cells;

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };
uint index = gl_GlobalInvocationID.x;

int alive       =  1;
int dead        = -1;
vec4 size       = vec4(0.1);
vec4 sizeOff    = vec4(dead);
vec4 red        = vec4(1.0, 0.0, 0.0, 1.0);
vec4 green      = vec4(0.0, 1.0, 0.0, 1.0); 
vec4 dimGreen   = vec4(0.0, 0.1, 0.0, 1.0);
vec4 blue       = vec4(0.0, 0.0, 1.0, 1.0);
vec4 white      = vec4(1.0, 1.0, 1.0, 1.0);
vec4 black      = vec4(0.0, 0.0, 0.0, 1.0);
vec4 dimBlue    = vec4(0.0, 0.0, 0.1, 1.0);

ivec4 setState(int alive, int stage){
    int notInUse = 0;
    ivec4 state = ivec4(alive, stage, notInUse, ubo.time);
    return state;
}

bool isFloatInsideVec4(float value, vec4 vector) {
    return value >= vector.x && value <= vector.w;
}

ivec4 neighbourCellsInRange(int range){
        ivec4 neighbourCellsInRange = ivec4(0);

        int gridSize = SQRT_OF_GRID;
        int indexX = int(index) % SQRT_OF_GRID;
        int indexY = int(index) / SQRT_OF_GRID;
        int startX = max(indexX - range, 0);
        int endX = min(indexX + range, SQRT_OF_GRID - 1);
        int startY = max(indexY - range, 0);
        int endY = min(indexY + range, SQRT_OF_GRID - 1);

        for (int x = startX; x <= endX; x++) {
            for (int y = startY; y <= endY; y++) {
                int neighbourIndex = y * SQRT_OF_GRID + x;

                bool notSelf = neighbourIndex != index;
                bool neighbourAlive = cellIn[neighbourIndex].states.x == alive && cellIn[neighbourIndex].states.y == 1;

                if (neighbourAlive && notSelf) {
                    neighbourCellsInRange++;
                }
            }
        }
    return neighbourCellsInRange; 
}

void simulate(out Cell cell){
    vec4 pos = cellIn[index].position;
    int neighbours = neighbourCellsInRange(1).x;
    vec4 colorIn = cellIn[index].color;
    ivec4 statesIn = cellIn[index].states;

    bool initialized = statesIn.x == alive && colorIn == blue && statesIn.y == 0;
    bool lifeCycle   = colorIn.g > 0.0f && colorIn.g < 1.0f  && statesIn.y == 0;
    bool end         = abs(colorIn.g - 1.0f) < tolerance && statesIn.y == 0;
    bool reproduce  = neighbours == 3 || (statesIn.x == alive && neighbours == 2);
    bool die  = neighbours < 2;

    if ( statesIn.y == 0 ) {
        cell =  initialized ?   Cell(pos, dimGreen, size, setState(alive, 0)) :
                lifeCycle ?     Cell(pos, colorIn + dimGreen, size, setState(alive, 0)) :
                end ?           Cell(pos, green, size, setState(alive, 1)) :
                                Cell(pos, black, sizeOff, setState(dead, 1));

    } else if ( statesIn.y == 1 ) {
        cell =  reproduce ?     Cell(pos, green, size, setState(alive, 0)) :
                die ?           Cell(pos, black, sizeOff, setState(dead, 0)) :
                                Cell(pos, black, sizeOff, setState(dead, 0));
    }
}

void main() {  
    if (cellIn[index].states.w == ubo.time) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } else { 
        simulate(cells);
        cellOut[index] = cells;
    }; 
}