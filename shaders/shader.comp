#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

const int SQRT_OF_GRID = 20;
layout (local_size_x = SQRT_OF_GRID, local_size_y = SQRT_OF_GRID, local_size_z = 1) in;

struct Cell {
	vec4 position;  // float    xy(z)
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    vec4 endOfTurn; // bool     pqrwt
};

layout (binding = 0) uniform ParameterUBO {
    int passedHours; //TODO 'long long' : int64_t passedHours;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };

uint index = gl_GlobalInvocationID.x;
int loopHours = ubo.passedHours % (SQRT_OF_GRID * SQRT_OF_GRID);

vec4 grey1 = vec4(0.8);
vec4 grey2 = vec4(0.1);

int countNumberOfNeighbours(int range){
        int numberOfNeighbours = 0;
        int gridSize = SQRT_OF_GRID;
        int indexX = int(index) % SQRT_OF_GRID;
        int indexY = int(index) / SQRT_OF_GRID;
        int startX = max(indexX - range, 0);
        int endX = min(indexX + range, SQRT_OF_GRID - 1);
        int startY = max(indexY - range, 0);
        int endY = min(indexY + range, SQRT_OF_GRID - 1);
        for (int x = startX; x <= endX; x++) {
            for (int y = startY; y <= endY; y++) {
                int neighborIndex = y * SQRT_OF_GRID + x;
                if (cellIn[neighborIndex].color.a == int(true) && neighborIndex != index) {
                    numberOfNeighbours++;
                }
            }
        }
    return numberOfNeighbours; }


bool shouldRun = true;

void main() {
    if (index != loopHours) {
        return; 
    }

        bool cellIsAlive = cellIn[index].color.a == int(true);
        cellOut[index].position = cellIn[index].position.xyzw;
        int numNeighbours = countNumberOfNeighbours(1);

        if (numNeighbours < 2 || numNeighbours > 3) {
            // Cell dies due to underpopulation or overpopulation
            cellOut[index].color = vec4(vec3(0.0), int(false));
            cellOut[index].size = vec4(0.0);
        } else if (numNeighbours == 3 || (cellIsAlive && numNeighbours == 2)) {
            // Cell survives or gets born
            vec3 green = vec3(0.0, 1.0, 0.0);
            cellOut[index].color = vec4(green.rgb, int(true));
            cellOut[index].size = vec4(0.15);
        } else {
            // Cell is dead and stays dead
            vec3 blue = vec3(0.0, 0.0, 1.0);
            cellOut[index].color = vec4(blue.rgb, int(false));
            cellOut[index].size = vec4(0.0);
        };
        shouldRun = false;
    }



// void main() {
//     if ( index == loopHours ){
//         cellOut = cellIn;

//         cellOut[index].position = cellIn[index].position.xyzw;
//         int numNeighbours = countNumberOfNeighbours(1);

//         if (numNeighbours >= 4) {
//             // Cell survives or gets born
//             vec3 green = vec3(0.0, 1.0, 0.0);
//             cellOut[index].color = vec4( green.rgb, int(true) );
//             cellOut[index].size = vec4( 0.15 );
//         }
//     }

// }





/*void main() {
    if (cellIn[index].endOfTurn.x == ubo.passedHours) { return; } else {    
        cellOut[index].position = cellIn[index].position.xyzw;
        int numNeighbours = countNumberOfNeighbours(1);
        bool cellIsAlive = cellIn[index].color.a == int(true);

        if (numNeighbours < 2 || numNeighbours > 3) {
            // Cell dies due to underpopulation or overpopulation
            cellOut[index].color = vec4(vec3(0.0), int(false));
            cellOut[index].size = vec4(0.0);
        } else if (numNeighbours == 3 || (cellIsAlive && numNeighbours == 2)) {
            // Cell survives or gets born
            vec3 green = vec3(0.0, 1.0, 0.0);
            cellOut[index].color = vec4( green.rgb, int(true) );
            cellOut[index].size = vec4(0.15);
        } else {
            // Cell is dead and stays dead
            vec3 blue = vec3(0.0, 0.0, 1.0);
            cellOut[index].color = vec4( blue.rgb, int(false) );
            cellOut[index].size = vec4(0.0);
        };
        cellOut[index].endOfTurn.x = ubo.passedHours;       
    }
}*/



    // // Walking rows from down to up
    // int blockStart = (loopHours / SQRT_OF_GRID) * SQRT_OF_GRID; // start index of the block
    // int blockEnd = blockStart + SQRT_OF_GRID; // end index of the block
    // int indexInBlock = loopHours % SQRT_OF_GRID; // index within the block
    // // check if the current index is within the block
    // if (index >= blockStart && index < blockEnd) { cellOut[index].color = vec4(0.0, 0.0, 1.0, 1.0); }

    //  // Color all walked pixels green
    // if( index < loopHours) { cellOut[index].color = vec4(0.0, 1.0, 0.0, 1); }

    //     // Walking pixel inverse
    // if( int( ubo.gridSize.x ) - loopHours - int(1) == int(index)){ 
    //     cellOut[index].color = vec4(0.0, vec3(1.0));
    // }