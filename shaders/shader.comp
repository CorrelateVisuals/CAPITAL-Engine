#version 450
//#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

const int SQRT_OF_GRID = 30;
layout (local_size_x = SQRT_OF_GRID, local_size_y = SQRT_OF_GRID, local_size_z = 1) in;

layout (binding = 0) uniform ParameterUBO {
    int passedHours; //TODO 'long long' : int64_t passedHours;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

uint index = gl_GlobalInvocationID.x;
int loopHours = ubo.passedHours % (SQRT_OF_GRID * SQRT_OF_GRID);

struct Cell {
    vec4 position;  // float    xy(z)
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    ivec4 states;    // bool     pqrwt
} cells;

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };

vec4 red            = vec4(1.0, 0.0, 0.0, 1.0);
vec4 green          = vec4(0.0, 1.0, 0.0, 1.0); 
vec4 blue           = vec4(0.0, 0.0, 1.0, 1.0);
vec4 white          = vec4(1.0, 1.0, 1.0, 1.0);
vec4 black          = vec4(0.0, 0.0, 0.0, 1.0);
vec4 dimBlue        = vec4(blue * vec4(vec3(0.3), 1.0f));
vec4 addLastColor   = cellIn[index].color + vec4(0.1);

vec4 stdSize = vec4(0.1);
vec4 stdSizeOff = vec4(-1.0);
ivec4 nowOn = ivec4(loopHours, 0, 0, 1);
ivec4 nowOff = ivec4(loopHours, 0, 0, -1);

bool isFloatInsideVec4(float value, vec4 vector) {
    return value >= vector.x && value <= vector.w;
}

vec4 neighbourCellsInRange(int range){
        vec4 neighbourCellsInRange = vec4(0);

        int gridSize = SQRT_OF_GRID;
        int indexX = int(index) % SQRT_OF_GRID;
        int indexY = int(index) / SQRT_OF_GRID;
        int startX = max(indexX - range, 0);
        int endX = min(indexX + range, SQRT_OF_GRID - 1);
        int startY = max(indexY - range, 0);
        int endY = min(indexY + range, SQRT_OF_GRID - 1);

        for (int x = startX; x <= endX; x++) {
            for (int y = startY; y <= endY; y++) {
                int neighbourIndex = y * SQRT_OF_GRID + x;

                bool notSelf = neighbourIndex != index;
                //bool neighbourIsRich = cellIn[neighbourIndex].color.g < 0.5;
                bool neighbourIsRich = cellIn[neighbourIndex].color == blue || cellIn[neighbourIndex].color == green;
                bool neighbourIsPoor = cellIn[neighbourIndex].color == green;

                if (neighbourIsRich && notSelf) {

                    neighbourCellsInRange++;
                }
            }
        }
    return neighbourCellsInRange; 
}

// vec3 r = vec3(1.0, 0.0, 0.0);  // Red color
// vec3 g = vec3(0.0, 1.0, 0.0);  // Green color
// vec3 b = vec3(0.0, 0.0, 1.0);  // Blue color

// vec3 currentR = vec3(0.8, 0.0, 0.0);  // Example current red color
// vec3 currentG = vec3(0.0, 0.9, 0.0);  // Example current green color
// vec3 currentB = vec3(0.0, 0.0, 0.7);  // Example current blue color

// // Check if colors are available and replace if higher
// if (dot(r, currentR) == 0.0 || dot(r, currentR) < dot(r, r)) {
//     currentR = r;
// }
// if (dot(g, currentG) == 0.0 || dot(g, currentG) < dot(g, g)) {
//     currentG = g;
// }
// if (dot(b, currentB) == 0.0 || dot(b, currentB) < dot(b, b)) {
//     currentB = b;
// }

void simulate(out Cell cell){
    vec4 pos = cellIn[index].position;
    int neighbours = int(neighbourCellsInRange(1).x);

    bool initiliazed    = cellIn[index].states.w == 1 && cellIn[index].color == blue;

    if ( initiliazed )  { cell = Cell(pos, green, stdSize, nowOn); }

    if (neighbours == 3 || (cellOut[index].color == green && neighbours == 2)) { 
        cell = Cell(pos, green, stdSize, nowOn);
    } else if (neighbours < 2) {
        cell = Cell(pos, black, stdSizeOff, nowOff);
    } else {
        cell = Cell(pos, black, stdSizeOff, nowOff);
    }
}

void main() {  

    if (cellIn[index].states.x == loopHours) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } else { 

        simulate(cells);

        cellOut[index].position  = cells.position;
        cellOut[index].color     = cells.color;
        cellOut[index].size      = cells.size;
        cellOut[index].states    = cells.states;
    }; 
}













// void simulate(out Cell cell){
//     vec4 pos = cellIn[index].position.xyzw;
//     int neighbours = neighbourCellsInRange(1);

//     if (neighbours < 2 || neighbours > 3) {
//         cell = Cell(pos, black, off, now);
//     } else if (neighbours == 3 || (cellOut[index].color == green && neighbours == 2)) {
//         cell = Cell(pos, green, on, now);
//     } else {
//         cell = Cell(pos, black, off, now);
//     };
// }

// void main() {  
//     if (cellIn[index].states == vec4(loopHours)) { 
//         cellOut[index] = cellIn[index]; 
//         return; 
//     } else { 

//         simulate(cells);

//         cellOut[index].position     = cells.position;
//         cellOut[index].color        = cells.color;
//         cellOut[index].size         = cells.size;
//         cellOut[index].states    = cells.states;
//     }; 
// }