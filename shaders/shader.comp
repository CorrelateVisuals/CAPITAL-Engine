#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant, std430) uniform pushConstant { 
    uint64_t passedHours;
};

layout (binding = 0) uniform ParameterUBO {
    vec4 lightDirection;
    ivec2 gridDimensions;
    float gridHeight;
    float cellSize;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

uint globalID_x = gl_GlobalInvocationID.x;
uint globalID_y = gl_GlobalInvocationID.y;
uint index = globalID_y * ubo.gridDimensions.x + globalID_x % ubo.gridDimensions.x + (globalID_x / ubo.gridDimensions.x) * ubo.gridDimensions.y;

struct Cell {
    vec4 position;  // float    xyz
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    ivec4 states;   // bool     alive, stage, cycle, passedHours
    vec4 tileSidesHeight;
    vec4 tileCornersHeight;
} cell;

int cycleSize = 24;
ivec4 setState(int _alive, int stage){ int cycle = int(passedHours % cycleSize + 1); 
return ivec4(_alive, stage, cycle, passedHours); }

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };

int alive       =  1;
int dead        = -1;
int off         = -1;
vec4 size       = vec4(ubo.cellSize);
vec4 sizeOff    = vec4(0.0);
vec4 red        = vec4(1.0, 0.0, 0.0, 1.0);
vec4 green      = vec4(0.0, 1.0, 0.0, 1.0); 
vec4 dimGreen   = vec4(0.0, 0.05, 0.0, 1.0);
vec4 blue       = vec4(0.0, 0.0, 1.0, 1.0);
vec4 white      = vec4(1.0, 1.0, 1.0, 1.0);
vec4 black      = vec4(0.0, 0.0, 0.0, 1.0);
vec4 dimBlue    = vec4(0.0, 0.0, 0.1, 1.0);
vec4 terrain    = vec4(0.0, 0.1, 0.1, 1.0);

vec4 pos        = cellIn[index].position;
vec4 colorIn    = cellIn[index].color;
ivec4 statesIn  = cellIn[index].states;

int neighbourAlive(int index) {
    bvec2 aliveState = equal(cellIn[index].states.xy, ivec2(alive, 1));
    return int(all(aliveState));
}

float findCenter(float a, float b){ return (a + b) * 0.5; }

float matchSideHeight(int _neighbourIndex){
    float neighbourHeight = cellIn[_neighbourIndex].position.z;
    float myHeight = cellIn[index].position.z;
    int toVertexScale = 10;   int heightOffset = -1;   float splitHeight = 0.5;
    float matchNeighbourHeight = ((neighbourHeight - myHeight) * toVertexScale + heightOffset) * splitHeight;
    return matchNeighbourHeight;
}

float matchCornerHeight(float _neighbourHeight) {
    float myHeight = cellIn[index].position.z;
    int toVertexScale = 10;  int heightOffset = -1; float splitHeight = 1.0;
    float matchNeighbourHeight = ((_neighbourHeight - myHeight) * toVertexScale + heightOffset) * splitHeight;
    return matchNeighbourHeight;
}


int getNeighbourIndex(ivec2 offset, ivec2 gridDimensions) {
    int indexX = int(index) % gridDimensions.x;
    int indexY = int(index) / gridDimensions.x;
    int neighbourX = (indexX + offset.x + gridDimensions.x) % gridDimensions.x;
    int neighbourY = (indexY + offset.y + gridDimensions.y) % gridDimensions.y;
    int neighbourIndex = neighbourY * gridDimensions.x + neighbourX;
    return neighbourIndex;
}

float randomFloat(int value) {
    float random = fract(sin(float(value)) * 43758.5453); // Hash function
    return random;
}

void setTileEdgeHeight( int _neighbourIndex, ivec2 _coordOffset ){
    vec4 sideHeight;
    vec4 cornerHeights;
    float _height = matchCornerHeight( ubo.gridHeight / 2 );

    if (_coordOffset == ivec2(-1, 0)) {
        sideHeight.z = matchSideHeight( _neighbourIndex );  // Left neighbour
        cornerHeights.z = _height;       // lower left neighbor (same as upper left)
    } else if (_coordOffset == ivec2(0, -1)) {
        sideHeight.w = matchSideHeight( _neighbourIndex );  // Lower neighbour
        cornerHeights.y = _height;       // lower right neighbor (same as lower left)
    } else if (_coordOffset == ivec2(0, 1)) {
        sideHeight.y = matchSideHeight( _neighbourIndex );  // Upper neighbour
        cornerHeights.w =_height;       // upper left neighbor (same as upper right)
    } else if (_coordOffset == ivec2(1, 0)) {
        sideHeight.x = matchSideHeight( _neighbourIndex );  // Right neighbour
        cornerHeights.x = _height;       // upper right neighbor (same as lower right)
    }
    cellOut[index].tileSidesHeight = sideHeight;
    cellOut[index].tileCornersHeight = cornerHeights;
}

int cycleNeighbours(int range) {
    int neighbourCellsInRange = 0;
    int neighbourIndex = off;

    ivec2 coordOffset;
    for (coordOffset.y = -range; coordOffset.y <= range; coordOffset.y++) {
        for (coordOffset.x = -range; coordOffset.x <= range; coordOffset.x++) {
            if (coordOffset == ivec2(0)) { continue; }

            neighbourIndex = getNeighbourIndex(coordOffset, ubo.gridDimensions);
            neighbourCellsInRange += neighbourAlive(neighbourIndex);

            setTileEdgeHeight(neighbourIndex, coordOffset);
         }
    }
    return neighbourCellsInRange;
}

bool aliveCell          = statesIn.x == alive;
bool deadCell           = statesIn.x == dead;
bool stage(int number)  { return statesIn.y == number; }
bool inCycleRange       = statesIn.z >= 0 && statesIn.z < cycleSize;
bool reachedCycleEnd    = statesIn.z == cycleSize;

bool initialized        = aliveCell && colorIn == blue;
bool lifeCycle          = aliveCell && inCycleRange;
bool endOfStage         = aliveCell && reachedCycleEnd;
bool live(int neighbours) { return (aliveCell && (neighbours == 3 || neighbours == 2)) || (deadCell && neighbours == 3); }
bool die(int neighbours)  { return (aliveCell && (neighbours < 2 || neighbours > 3));}
vec4 colorIncrement     = colorIn + vec4(float((passedHours % cycleSize + 1)) / float(cycleSize * 50), vec3(0.0));

void simulate(out Cell cell){
    int neighbours  = cycleNeighbours(1);

    if (stage(0)) {
        cell = initialized ?    Cell(pos, green, size, setState(alive, 0), cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight) :
               lifeCycle ?      Cell(pos, colorIncrement, size, setState(alive, 0),cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight) :
               endOfStage ?     Cell(pos, green, size, setState(alive, 1),cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight) :
                                Cell(pos, terrain, sizeOff, setState(dead, 1),cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight);
    } else if (stage(1)) {
        cell = live(neighbours) ?   Cell(pos, green, size, setState(alive, 0),cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight) :
               die(neighbours) ?    Cell(pos, terrain, sizeOff, setState(dead, 0),cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight) :
                                    Cell(pos, colorIn, sizeOff, setState(dead, 1),cellOut[index].tileSidesHeight, cellOut[index].tileCornersHeight);
    }
}

void main() {  
    if (cellIn[index].states.w == passedHours) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } else { 
        simulate(cell);
        cellOut[index] = cell;
    }; 
}