#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
//  You can use xyzw, rgba (for colors), or stpq (for texture coordinates)

struct Cell {
	vec4 position;
    vec4 color;
    vec4 size;              // int size.x
    vec4 gridSize;
    vec4 printGLSL;
};

layout (binding = 0) uniform ParameterUBO {
    //int64_t passedHours;
    int passedHours;
} ubo;

layout(std430, binding = 1) readonly buffer CellSSBOIn {
   Cell cellsIn[ ];
};

layout(std430, binding = 2) buffer CellSSBOOut {
   Cell cellOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    Cell cellIn  = cellsIn[index];

    cellOut[index].position = cellIn.position.rgba;
    cellOut[index].color = vec4( 0.5, vec2(0.0), 1.0 );

    // Walking rows from down to up
    int blockStart = (ubo.passedHours / 32) * 32; // start index of the block
    int blockEnd = blockStart + 32; // end index of the block
    int indexInBlock = ubo.passedHours % 32; // index within the block
    // check if the current index is within the block
    if (index >= blockStart && index < blockEnd) { cellOut[index].color = vec4(0.0, 0.0, 1.0, 1.0); }

    // Walking pixel white, from left top to corner right
    if( index == ubo.passedHours){ cellOut[index].color = vec4(1.0); }
    // Color all walked pixels green
    if( index < ubo.passedHours) { cellOut[index].color = vec4(0.0, 0.5, 0.0, 1); }

    // Walking pixel inverse
    if( int( cellIn.gridSize.x ) - ubo.passedHours - int(1) == int(index)){ 
        cellOut[index].color = vec4(0.0, vec3(1.0));
    }

    cellOut[index].printGLSL =  vec4(gl_GlobalInvocationID.x + 10.0, vec3(0.0));
}