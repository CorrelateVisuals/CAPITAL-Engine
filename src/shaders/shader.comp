#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

const int SQRT_OF_GRID = 100;

struct Cell {
	vec4 position;  // float    xy(z)
    vec4 color;     // float    rgba
    vec4 size;      // float    x
};

layout (binding = 0) uniform ParameterUBO {
    int passedHours; //TODO 'long long' : int64_t passedHours;
    int gridSize;

    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

layout(std430, binding = 1) readonly buffer CellSSBOIn {
   Cell cellsIn[ ];
};

layout(std430, binding = 2) buffer CellSSBOOut {
   Cell cellOut[ ];
};

layout (local_size_x = SQRT_OF_GRID, local_size_y = 1, local_size_z = 1) in;


uint index = gl_GlobalInvocationID.x;
Cell cellIn  = cellsIn[index];

void main() { if ( cellIn.size.x == -1.0f) { return; } // Skip all dead cells.

    mat4 test = ubo.model;

    cellOut[index].position = cellIn.position.rgba;
    cellOut[index].color = vec4( 0.5, vec2(0.0), 1.0 );

    // Walking rows from down to up
    int blockStart = (ubo.passedHours / SQRT_OF_GRID) * SQRT_OF_GRID; // start index of the block
    int blockEnd = blockStart + SQRT_OF_GRID; // end index of the block
    int indexInBlock = ubo.passedHours % SQRT_OF_GRID; // index within the block
    // check if the current index is within the block
    if (index >= blockStart && index < blockEnd) { cellOut[index].color = vec4(0.0, 0.0, 1.0, 1.0); }

    // Walking pixel white, from left top to corner right
    if( index == ubo.passedHours){ cellOut[index].color = vec4(1.0); }
    // Color all walked pixels green
    if( index < ubo.passedHours) { cellOut[index].color = vec4(0.0, 0.5, 0.0, 1); }

    // Walking pixel inverse
    if( int( ubo.gridSize.x ) - ubo.passedHours - int(1) == int(index)){ 
        cellOut[index].color = vec4(0.0, vec3(1.0));
    }
}