#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

const int SQRT_OF_GRID = 20;
layout (local_size_x = SQRT_OF_GRID, local_size_y = 1, local_size_z = 1) in;

struct Cell {
	vec4 position;  // float    xy(z)
    vec4 color;     // float    rgba
    vec4 size;      // float    x
    vec4 endOfTurn; // bool     pqrwt
};

layout (binding = 0) uniform ParameterUBO {
    int passedHours; //TODO 'long long' : int64_t passedHours;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellsIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };

uint index = gl_GlobalInvocationID.x;
Cell cellIn  = cellsIn[index];
int loopHours = ubo.passedHours % 400;

vec4 grey1 = vec4(0.1);
vec4 grey2 = vec4(0.8);

void main() {if (cellIn.size.x == -1.0f) { return; }// Skip all dead cells.
    
    // Default color is red.
    cellOut[index].color = vec4(1.0, 0.0, 0.0, 1.0);
    cellOut[index].position = cellIn.position.rgba;

    // If the current cell was colored in a previous frame, set the color to grey2.
    if (cellIn.endOfTurn == vec4(int(true))) {
        cellOut[index].color = grey2;
    }

    // If it's time to color the current cell and its neighbors.
    if (index == loopHours) {
        int range = 4;
        int gridSize = 20;
        int indexX = int(index) % SQRT_OF_GRID;
        int indexY = int(index) / SQRT_OF_GRID;
        int startX = max(indexX - range, 0);
        int endX = min(indexX + range, SQRT_OF_GRID - 1);
        int startY = max(indexY - range, 0);
        int endY = min(indexY + range, SQRT_OF_GRID - 1);

        // Color the current cell and its neighbors.
        for (int x = startX; x <= endX; x++) {
            for (int y = startY; y <= endY; y++) {
                int neighborIndex = y * SQRT_OF_GRID + x;
                if (neighborIndex == index) {   // color cell
                    cellOut[neighborIndex].color = vec4(0.0, 0.0, 1.0, 1.0);
                } else {  // if not already colored
                        cellOut[neighborIndex].color = grey1;
                        cellOut[neighborIndex].endOfTurn = vec4(int(true));
                    }
                }
            }
        }
    } 








    // // Walking rows from down to up
    // int blockStart = (loopHours / SQRT_OF_GRID) * SQRT_OF_GRID; // start index of the block
    // int blockEnd = blockStart + SQRT_OF_GRID; // end index of the block
    // int indexInBlock = loopHours % SQRT_OF_GRID; // index within the block
    // // check if the current index is within the block
    // if (index >= blockStart && index < blockEnd) { cellOut[index].color = vec4(0.0, 0.0, 1.0, 1.0); }

    //  // Color all walked pixels green
    // if( index < loopHours) { cellOut[index].color = vec4(0.0, 1.0, 0.0, 1); }

    //     // Walking pixel inverse
    // if( int( ubo.gridSize.x ) - loopHours - int(1) == int(index)){ 
    //     cellOut[index].color = vec4(0.0, vec3(1.0));
    // }