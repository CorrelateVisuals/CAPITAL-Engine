#version 450

//  You can use xyzw, rgba (for colors), or stpq (for texture coordinates)

struct Particle {
	vec4 position;
    vec4 color;
    vec4 size;              // int size.x
    vec4 substractGrid;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  
    Particle particleIn  = particlesIn[index];

    particlesOut[index].position = particleIn.position.rgba;
    particlesOut[index].color = vec4( 1.0, vec2(0.0), 1.0 );

    if( index == ubo.deltaTime){
        particlesOut[index].color = vec4(1.0);
    }

    if( particleIn.substractGrid.x - ubo.deltaTime - 1 == index){
        particlesOut[index].color = vec4(0.0, vec3(1.0));
    }


    //particlesOut[index].color = vec4(1.0, 1.0, 1.0, ubo.deltaTime);


    // particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    // particlesOut[index].velocity = particleIn.velocity;

    // Flip movement at window border
    // if ((particlesOut[index].position.x <= -1.0) || (particlesOut[index].position.x >= 1.0)) {
    //     particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
    // }
    // if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
    //     particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
    // }

}