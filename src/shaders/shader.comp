#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
//  You can use xyzw, rgba (for colors), or stpq (for texture coordinates)

struct Cell {
	vec4 position;
    vec4 color;
    vec4 size;              // int size.x
    vec4 gridSize;
    vec4 printGLSL;
};

layout (binding = 0) uniform ParameterUBO {
    //int64_t passedHours;
    int passedHours;
} ubo;

layout(std430, binding = 1) readonly buffer CellSSBOIn {
   Cell cellsIn[ ];
};

layout(std430, binding = 2) buffer CellSSBOOut {
   Cell cellOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    Cell cellIn  = cellsIn[index];

    cellOut[index].position = cellIn.position.rgba;
    cellOut[index].color = vec4( 1.0, vec2(0.0), 1.0 );

    if( index == ubo.passedHours){
        cellOut[index].color = vec4(1.0);
    }

    if( int( cellIn.gridSize.x ) - ubo.passedHours - int(1) == int(index)){
        cellOut[index].color = vec4(0.0, vec3(1.0));
    }

    if( index < ubo.passedHours) {
        cellOut[index].color = vec4(0.0, 1.0, 0.0, 1);
    }

    cellOut[index].printGLSL =  vec4(gl_GlobalInvocationID.x, vec3(0.0));
}